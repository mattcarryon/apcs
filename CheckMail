/**
 * @author Matt Carreon
 */
import java.util.Scanner;

public class CheckMail{
    private double[] dims = new double[3];
    private double weight;
    private double biggest;
    private double smallest;
    private double middle;
    private double girth;
    Scanner userInput = new Scanner(System.in);
    
    /**
     * Runs the method to get dimensions and weight, runs a method to sort dimensions in ascending
     * order, then runs a method to calculate the girth and determines if the package is 
     * acceptable.
     */
    public CheckMail(){
        setMail();
        sortArray();
        getGirth();
        
        if((girth+biggest) > 100 && weight > 70){
            System.out.println("Your package is too big and too heavy, please repackage.");
        } else if((girth+biggest) > 100){
            System.out.println("Your package is too big, please repackage.");
        } else if(weight > 70){
            System.out.println("Your package is too heavy, please repackage.");
        } else{
            System.out.println("Package accepted.");
        }

    }
    
    /**
     * Asks the user for 3 dimensions (inches) and the weight (lbs) of the package.
     */
    public void setMail(){
        for(int i = 0; i < 3; i++){
            System.out.print("Enter dimension " + (i+1) + " (inches): ");
            dims[i] = userInput.nextDouble();
        }             
        System.out.print("Enter weight (lbs): ");
        weight = userInput.nextDouble();
    }
    
    /**
     * Sorts the three dimensions into ascending value and then returns the array
     * 
     * @return double[] array of dimensions in ascending order
     */
    public double[] sortArray(){
        for(int i = 0; i < 2; i++){
            for(int j = 1; j < 3; j++){
                if(dims[i] > dims[j]){
                    double temp = dims[i];
                    dims[i] = dims[j];
                    dims[j] = temp;
                }
            }
        }
        biggest = dims[2];
        middle = dims[1];
        smallest = dims[0];
        
        return dims;
    }
    
    /**
     * Calculates the girth and then returns it
     * 
     * @return double Value of girth
     */
    public double getGirth(){
        girth = (2*smallest) + (2*middle);
        return girth;
    }
    
    /**
     * @return double Value of smallest dimension
     */
    public double getSmallest(){
        return smallest;
    }
    
    /**
     * @return double Value of middle dimension
     */    
    public double getMiddle(){
        return middle;
    }
    
    /**
     * @return double Value of biggest dimension
     */    
    public double getBiggest(){
        return biggest;
    }
    
    /**
     * @return double Value of weight
     */    
    public double getWeight(){
        return weight;
    }
}
